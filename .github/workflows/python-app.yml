name: Python application

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10.12]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r backend/requirements.txt

    - name: Lint with flake8
      id: linting
      run: flake8
      continue-on-error: true

    - name: Check with pyright
      id: type_checking
      run: |
        pyright backend/src/
      continue-on-error: true

    - name: Running tests in Docker Compose
      id: tests
      run: docker-compose -f backend/tests/functional/docker-compose.yml up --exit-code-from tests

    - name: Send Telegram notification on success or failure
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        REPO_NAME=$(basename $GITHUB_REPOSITORY)
        MESSAGE="$REPO_NAME: Pipeline for $GITHUB_SHA finished "
        if [ ${{ job.status }} == 'success' ]; then
          MESSAGE+="successfully! ðŸŽ‰"
        else
          MESSAGE+="with error."

          # Check which step failed and add it to the message
          if [ ${{ steps.linting.exitcode }} -ne 0 ]; then
            MESSAGE+="\nFailed step: Linting"
          elif [ ${{ steps.type_checking.exitcode }} -ne 0 ]; then
            MESSAGE+="\nFailed step: Type checking"
          elif [ ${{ steps.tests.exitcode }} -ne 0 ]; then
            MESSAGE+="\nFailed step: Tests"
          fi
        fi
        curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d "chat_id=$TELEGRAM_CHAT_ID" \
          -d "text=$MESSAGE"
